<?xml version="1.0" encoding="UTF-8" ?>
<!-- **********************************************************************-->
<!-- Copyright 2012-2025                                                   -->
<!-- Matthew Boelkins                                                      -->
<!--                                                                       -->
<!-- This file is part of Active Calculus.                                 -->
<!--                                                                       -->
<!-- Permission is granted to copy, distribute and/or modify this document -->
<!-- under the terms of the Creative Commons BY-SA license.  The work      -->
<!-- may be used for free by any party so long as attribution is given to  -->
<!-- the author(s), the work and its derivatives are used in the spirit of -->
<!-- "share and share alike".  All trademarks are the registered marks of  -->
<!-- their respective owners.                                              -->
<!-- **********************************************************************-->

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-8a-1-linear-poly">

  <title>Extending local linearization</title>

  <objectives>
    <ul>
      <li>
        <p>
          How well does the tangent line at <m>a = 0</m> approximate the function <m>f(x) = e^x</m> near <m>a = 0</m>?
        </p>
      </li>
      <li>
        <p>
          Can we find higher degree polynomials that approximate <m>f(x) = e^x</m> near <m>a = 0</m> more effectively than the approximation generated by the tangent line?
        </p>
      </li>
      <li>
        <p>
          How does the degree of the polynomial impact the accuracy of the approximation of <m>f(x) = e^x</m>?
        </p>
      </li>
    </ul>

  </objectives>

  <introduction>
    <p>
      Early in our study of calculus in <xref ref="sec-1-8-tan-line-approx">Section</xref>, we learned that if a function <m>f</m> has a derivative at a fixed value <m>x=a</m>, when we zoom in on its graph near <m>(a,f(a))</m>, the function looks linear.  Indeed, such a function is differentiable, and we know that near a fixed input value <m>a</m>, 
      <me>
        f(x) \approx L(x) = f(a) + f'(a)(x-a),
      </me>
      where <m>L</m> is the tangent line approximation to <m>f</m> at <m>a</m>.
    </p>

    <p>
      In this section, we use the function <m>f(x) = e^x</m> as a case study to investigate how we can use other basic functions to better approximate the value of <m>f(x)</m> near <m>a = 0</m>.
    </p>

    <xi:include href="./previews/PA-8a-1-WW.xml" />
    <xi:include href="./previews/PA-8a-1.xml" />
  </introduction>

  <subsection>
    <title>Finding a quadratic approximation</title>
    <!-- <idx><h>quadratic approximation</h></idx> -->
    <!-- think carefully about indexing -->

    <p>
      In <xref ref="PA-8a-1">Preview Activity</xref>, we found that the error in the tangent line approximation of <m>f(x) = e^x</m> at <m>a = 0</m> grows significantly as we consider <m>x</m>-values further and further from <m>0</m>.  This is due to the fact that the tangent line is straight while the function <m>f(x) = e^x</m> has some curvature.  To hopefully improve the approximation, we are going to try to find a quadratic function whose curvature matches that of <m>f(x) = e^x</m> at the point of tangency.
    </p>

    <p>
      While we have usually used the notation <q><m>L(x)</m></q> for the tangent line, in what follows we will instead write <q><m>T_1(x)</m></q>, and think of this as <q>the degree <m>1</m> approximation</q>.  In a similar way, we will write <q><m>T_2(x)</m></q> for the quadratic approximation.
    </p>

    <p>
      Recall that for any function <m>f</m> that has a derivative at <m>a=0</m>, its tangent line approximation at <m>a=0</m> is 
      <me>
        T_1(x) = f(0) + f'(0)(x - 0)
      </me>.
      Moreover, the functions <m>T_1</m> and <m>f</m> have two exact values in common.  First, their function values agree at the point of tangency: <m>T_1(0) = f(0)</m>.  And second, since <m>T_1(x)</m> is a linear function whose slope is <m>f'(0)</m>, it is also true that their derivative values agree at the point of tangency: <m>T_1'(0) = f'(0)</m>.
    </p>

    <p>
      To generate a quadratic function that approximates <m>f</m> near <m>a = 0</m>, we choose to have this quadratic function not only share the same function value and derivative value as <m>f</m> at <m>a=0</m>, but also the same second derivative value<fn>Here we are implicitly assuming that the function <m>f(x)</m> has a second derivative at <m>a=0</m>, which is a property that holds for <m>f(x) = e^x</m>.</fn> at <m>a=0</m> in order to match the concavity or curvature of <m>f</m>.  In other words, we are adding a term to the linear approximation that gives the same amount of curvature as the function <m>f</m>. 
    </p>

    <p>
      We can state these requirements more formally as follows.
    </p>

    <p>
      <assemblage xml:id="assemblage-">
        <title>The quadratic approximation of <m>f(x) = e^x</m></title>
        <p>
          To extend the linear approximation of <m>f(x) = e^x</m> to a quadratic approximation,
          we seek a function <m>T_2(x)</m> of the form
          <me>
            T_2(x) = b_0 + b_1 x + b_2 x^2
          </me>
          that satisfies 
          <ul>
            <li>
              <p>
                <m>T_2(0) = f(0)</m>, so <m>T_2</m> and <m>f</m> share the same height at <m>a = 0</m>;
              </p>
            </li>
            <li>
              <p>
                <m>T_2'(0) = f'(0)</m>, so <m>T_2</m> and <m>f</m> share the same slope at <m>a = 0</m>;
              </p>
            </li>
            <li>
              <p>
                <m>T_2''(0) = f''(0)</m>, so <m>T_2</m> and <m>f</m> share the same concavity at <m>a = 0</m>.
              </p>
            </li>
          </ul>
        </p>
      </assemblage>
    </p>
        

    <p>
      In <xref ref="act-8a-1-1">Activity</xref>, we explore how these three requirements determine <m>b_0</m>, <m>b_1</m>, and <m>b_2</m> in <m>T_2(x)</m> for the function <m>f(x) = e^x</m>.
    </p>

    <xi:include href="./activities/act-8a-1-1.xml" />

    <!--
    <p>
      While we will develop this idea more formally in <xref ref="sec-8a-2-taylor-poly">Section</xref>, the polynomial <m>T_2(x)</m> that we found in <xref ref="act-8a-1-1">Activity</xref> is called the <q>degree 2 Taylor polynomial of <m>f</m> centered at <m>a=0</m></q>.
    </p>
    -->

  </subsection>

  <subsection>
    <title>Over and over again</title>

    <p>
      A remarkable feature of mathematics is that when a process effectively generates an approximation, doing that same process again (perhaps with some slight modifications) often improves the approximation.  In <xref ref="act-8a-1-1">Activity</xref>, we found a quadratic approximation of <m>f(x)=e^x</m> near the point <m>(0,f(0))</m> that results in an improvement over the linear approximation of <m>f</m>.  It is reasonable to hope that a degree 3 polynomial approximation of <m>f(x) = e^x</m> will be even better.
    </p>

    <p>
      To investigate, we seek a degree <m>3</m> polynomial <m>T_3(x)</m> of the form
      <me>
        T_3(x) = c_0 + c_1 x + c_2 x^2 + c_3 x^3
      </me>
      that satisfies 
      <ul>
        <li>
          <p>
            the same conditions we imposed on <m>T_2(x)</m>: 
            <me>T_3(0) = f(0), T_3'(0) = f'(0), \mbox{ and } T_3''(0) = f''(0)</me> 
            so that <m>T_3</m> and <m>f</m> share the same function value, first derivative value, and second derivative value at <m>a = 0</m>,
          </p>
        </li>
        <li>
          <p>
            plus we add the additional condition that 
            <me>T_3'''(0) = f'''(0)</me>, 
            so <m>T_3</m> and <m>f</m> share the same third derivative value<fn>Here we are assuming that the original function <m>f</m> has a third derivative at <m>a = 0</m>, which is valid since <m>f'''(x) = e^x</m>.</fn> at <m>a = 0</m>.
          </p>
        </li>
      </ul>
      We are using the unknown constants <m>c_0</m>, <m>c_1</m>, <m>c_2</m>, and <m>c_3</m> for <m>T_3(x)</m> instead of the constants <m>b_0</m>, <m>b_1</m>, and <m>b_2</m> that we considered for <m>T_2(x)</m> since we don't yet know whether the first three values of <m>c_i</m> will be the same as those of <m>b_i</m> or not.
    </p>

    <p>
      Like in our work with <m>T_2</m>, we observe that since <m>T_3</m> is a polynomial, its derivatives are straightforward to compute.  For instance, 
        <me>T_3'(x) = c_1 + 2c_2 x + 3c_3 x^2.</me>
      We continue our investigation of this new approximation of <m>f(x) = e^x</m> in <xref ref="act-8a-1-2">Activity</xref>, where we work to determine the values of <m>c_0</m>, <m>c_1</m>, <m>c_2</m>, and <m>c_3</m> plus explore how well <m>T_3(x)</m> approximates <m>f(x)</m> near <m>a = 0</m>.
    </p>  

    <xi:include href="./activities/act-8a-1-2.xml" />

<!--
    <p>
      As in the quadratic case, we'll call the cubic polynomial <m>T_3(x)</m> the <q>degree 3 Taylor polynomial of <m>f</m> centered at <m>a=0</m></q>.  See <xref ref="def-Taylor-poly-0">Definition</xref> for the formal definition of a degree <m>n</m> Taylor polynomial centered at <m>a = 0</m>.
    </p>
-->
    
  </subsection>

  <subsection>
    <title>As the degree of the approximation increases</title>
    <p>
      Our work so far with the case study function <m>f(x) = e^x</m> suggests that as we find degree <m>n</m> polynomial approximations, <m>T_n</m>, that satisfy 
      <me>T_n(0) = f(0), T_n'(0) = f'(0), T_n''(0) = f_n''(0), \ldots, T_n^{(n)}(0) = f^{(n)}(0)</me>, increasing the value of <m>n</m> improves the accuracy of the approximation.
    </p>


    <p>
      In the next activity, we introduce the idea of the <term>error</term> of a polynomial approximation and investigate explicitly how the error varies for approximations of <m>f(x) = e^x</m> as we vary <m>n</m> and vary <m>x</m>.
    </p>

    <xi:include href="./activities/act-8a-1-3.xml" />

    <p>
      One important application of our work so far is that these polynomial approximations provide a way to approximate values of the function <m>f(x) = e^x</m>.  For example, since we've shown that 
      <me>
        e^x \approx 1 + x + \frac{1}{2}x^2 + \frac{1}{6}x^3 + \frac{1}{24}x^4
      </me>,
      it follows that
      <me>
        e^{\frac{1}{2}} \approx 1 + \frac{1}{2} + \frac{1}{2}\left( \frac{1}{2} \right)^2 + \frac{1}{6}\left( \frac{1}{2} \right)^3  + \frac{1}{24}\left( \frac{1}{2} \right)^4 = \frac{211}{128} = 1.6484375
      </me>.
      In fact, this approach through polynomial approximation is how computers determine the value of <m>e^{\frac{1}{2}}</m>, which is approximately <m>1.64872127</m>, to whatever accuracy is needed: by using even better polynomial approximations than the degree-<m>4</m> one that we found, computers are able to generate the approximate value <m>1.64872127</m> simply by the basic computations of addition and multiplication with enough terms.
    </p>
      

    <p>
      Throughout this section, we have focused on <m>f(x) = e^x</m>.  One of the characteristics that makes <m>f(x) = e^x</m> special is the fact that its derivative is itself; indeed, <m>f^{(n)}(x) = e^x</m> for every natural number <m>n</m>, which in turn implies that <m>f^{(n)}(0) = 1</m> for every value of <m>n</m>.  This will ultimately help to find patterns in the coefficients of the degree <m>n</m> polynomial approximation, <m>T_n(x)</m>, and be able to easily write down a formula for any value of <m>n</m>.  
    </p>

    <p>  
      It is natural to think that we can find similar approximations of other functions, especially ones such as <m>\sin(x)</m> and <m>\cos(x)</m> that also exhibit repeating patterns in their derivatives.  In <xref ref="sec-8a-2-taylor-poly">Section</xref>, we will develop a general approach to finding the coefficient of <m>x^n</m> in the degree <m>n</m> approximation of any function with <m>n</m> derivatives and learn how to find a general expression for the degree <m>n</m> approximation.
    </p>


  </subsection>

  <subsection>
    <title>Summary</title>
    <p>
      <ul>
      <li>
        <p>
          For the function <m>f(x) = e^x</m>, which bends considerably as we move away from <m>a = 0</m> (especially for <m>x > 0</m>), the tangent line, <m>T_1(x)</m>, is not a very good approximation for <m>x</m>-values that satisfy <m>|x| > 0.5</m>.  For example, <m>|T_1(0.5) - e^{0.5}| \approx 0.148721</m>, so the linear approximation has an absolute error of more than <m>0.1</m> at <m>x = 0.5</m>.
        </p>
      </li>
      <li>
        <p>
          Using the strategy of finding a higher degree polynomial whose function and derivative values match at the selected point of tangency, we are able to find higher degree polynomials that much more effectively approximate <m>f(x) = e^x</m> near <m>a = 0</m> than the approximation generated by the tangent line.  For example, using the degree <m>3</m> approximation <m>T_3(x) = 1 + x + \frac{1}{2}x^2 + \frac{1}{6}x^3</m>, we see that <m>|f(x) - T_3(x)| \lt 0.01</m> for all <m>x</m> that satisfy <m>|x| \lt 0.6</m>.
        </p>
      </li>
      <li>
        <p>
          It appears that the degree of the polynomial impacts the accuracy of the approximation of <m>f(x) = e^x</m> in at least two ways:  if we fix an <m>x</m>-value, the higher the degree of the polynomial, the more accurate the approximation.  In addition, raising the degree of the polynomial approximation appears to widen the interval on which the approximation is effective.
        </p>
      </li>

      </ul>
    </p>
  </subsection>


  <xi:include href="./exercises/ez-8a-1.xml" />


</section>

